#pragma kernel UpdateParticles
#pragma kernel UpdateSprings

struct Particle
{
    float3 position;
    float3 velocity;
    float3 force;
    float isFixed;
};

uint3 size;
float dt;
float ks;
float kd;
float wass;
float3 gravity;
float3 rest;

static uint2 springs[12] =
{
    uint2(0, -1), uint2(0, 1), uint2(-1, 0), uint2(1, 0),
    uint2(-1, -1), uint2(-1, 1), uint2(1, -1), uint2(1, 1),
    uint2(0, -2), uint2(0, 2), uint2(-2, 0), uint2(2, 0)
};

RWStructuredBuffer<Particle> particles;

uint GetIndex(uint3 id)
{
    return id.x * size.y + id.y;
}

uint GetIndex(uint2 id)
{
    return id.x * size.y + id.y;
}

bool IsValid(uint2 id)
{
    return id.x < size.x && id.y < size.y;
}

[numthreads(8,8,1)]
void UpdateParticles(uint3 id : SV_DispatchThreadID)
{
    uint index = GetIndex(id);
    if (particles[index].isFixed) return;
    particles[index].velocity += (particles[index].force * wass + gravity) * dt;
    particles[index].position += particles[index].velocity * dt;
    particles[index].force = 0;
}

[numthreads(8,8,1)]
void UpdateSprings(uint3 id : SV_DispatchThreadID)
{
    uint index = GetIndex(id);
    if (particles[index].isFixed) return;
    for (int i = 0; i < 12; i++)
    {
        uint2 pos = id.xy + springs[i];
        if (IsValid(pos))
        {
            uint posIndex = GetIndex(pos);
            float3 dir = particles[posIndex].position - particles[index].position;
            particles[index].force += ks * (1 - rest[i / 4] * rcp(length(dir))) * dir;
        }
    }
}