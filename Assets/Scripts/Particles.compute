#pragma kernel UpdateParticles
#pragma kernel UpdateSprings

struct Particle
{
    float3 position;
    float3 velocity;
    float3 force;
    float isFixed;
};


float dt;
float ks;
float kd;
float wass;
float3 gravity;
int3 size;
float3 rest;

static int2 springs[12] =
{
    int2(0, -1), int2(0, 1), int2(-1, 0), int2(1, 0),
    int2(-1, -1), int2(-1, 1), int2(1, -1), int2(1, 1),
    int2(0, -2), int2(0, 2), int2(-2, 0), int2(2, 0)
};

RWStructuredBuffer<Particle> particles;

int2 GetId(int index)
{
    return int2(index / size.y, index % size.y);
}

int GetIndex(int2 id)
{
    return id.x * size.y + id.y;
}

bool IsValid(int2 id)
{
    return id.x >= 0 && id.x < size.x && id.y >= 0 && id.y < size.y;
}

[numthreads(1024,1,1)]
void UpdateParticles(uint3 id : SV_DispatchThreadID)
{
    const int index = id.x;
    if (index >= size.z) return;
    if (particles[index].isFixed) return;
    particles[index].velocity += (particles[index].force * wass + gravity) * dt;
    particles[index].position += particles[index].velocity * dt;
    particles[index].force = 0;
}

[numthreads(1024,1,1)]
void UpdateSprings(uint3 id : SV_DispatchThreadID)
{
    const int index = id.x;
    if (index >= size.z) return;
    if (particles[index].isFixed) return;
    id.xy = GetId(index);
    for (int i = 0; i < 12; i++)
    {
        const int2 pos = id.xy + springs[i];
        if (IsValid(pos))
        {
            const int posIndex = GetIndex(pos);
            const float3 dir = particles[posIndex].position - particles[index].position;
            const float3 ndir = normalize(dir);
            particles[index].force += ks * (length(dir) - rest[i / 4]) * ndir;
            particles[index].force -= kd * dot(ndir, particles[index].velocity) * ndir;
        }
    }
}